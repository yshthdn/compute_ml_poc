# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Prediction(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, mem_predicted: str=None, cpu_predicted: str=None, time_predicted: str=None, confidence_level: str=None):  # noqa: E501
        """Prediction - a model defined in Swagger

        :param mem_predicted: The mem_predicted of this Prediction.  # noqa: E501
        :type mem_predicted: str
        :param cpu_predicted: The cpu_predicted of this Prediction.  # noqa: E501
        :type cpu_predicted: str
        :param time_predicted: The time_predicted of this Prediction.  # noqa: E501
        :type time_predicted: str
        :param confidence_level: The confidence_level of this Prediction.  # noqa: E501
        :type confidence_level: str
        """
        self.swagger_types = {
            'mem_predicted': str,
            'cpu_predicted': str,
            'time_predicted': str,
            'confidence_level': str
        }

        self.attribute_map = {
            'mem_predicted': 'mem_predicted',
            'cpu_predicted': 'cpu_predicted',
            'time_predicted': 'time_predicted',
            'confidence_level': 'confidence_level'
        }

        self._mem_predicted = mem_predicted
        self._cpu_predicted = cpu_predicted
        self._time_predicted = time_predicted
        self._confidence_level = confidence_level

    @classmethod
    def from_dict(cls, dikt) -> 'Prediction':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Prediction of this Prediction.  # noqa: E501
        :rtype: Prediction
        """
        return util.deserialize_model(dikt, cls)

    @property
    def mem_predicted(self) -> str:
        """Gets the mem_predicted of this Prediction.


        :return: The mem_predicted of this Prediction.
        :rtype: str
        """
        return self._mem_predicted

    @mem_predicted.setter
    def mem_predicted(self, mem_predicted: str):
        """Sets the mem_predicted of this Prediction.


        :param mem_predicted: The mem_predicted of this Prediction.
        :type mem_predicted: str
        """

        self._mem_predicted = mem_predicted

    @property
    def cpu_predicted(self) -> str:
        """Gets the cpu_predicted of this Prediction.


        :return: The cpu_predicted of this Prediction.
        :rtype: str
        """
        return self._cpu_predicted

    @cpu_predicted.setter
    def cpu_predicted(self, cpu_predicted: str):
        """Sets the cpu_predicted of this Prediction.


        :param cpu_predicted: The cpu_predicted of this Prediction.
        :type cpu_predicted: str
        """

        self._cpu_predicted = cpu_predicted

    @property
    def time_predicted(self) -> str:
        """Gets the time_predicted of this Prediction.


        :return: The time_predicted of this Prediction.
        :rtype: str
        """
        return self._time_predicted

    @time_predicted.setter
    def time_predicted(self, time_predicted: str):
        """Sets the time_predicted of this Prediction.


        :param time_predicted: The time_predicted of this Prediction.
        :type time_predicted: str
        """

        self._time_predicted = time_predicted

    @property
    def confidence_level(self) -> str:
        """Gets the confidence_level of this Prediction.


        :return: The confidence_level of this Prediction.
        :rtype: str
        """
        return self._confidence_level

    @confidence_level.setter
    def confidence_level(self, confidence_level: str):
        """Sets the confidence_level of this Prediction.


        :param confidence_level: The confidence_level of this Prediction.
        :type confidence_level: str
        """
        allowed_values = ["LOW", "MEDIUM", "HIGH"]  # noqa: E501
        if confidence_level not in allowed_values:
            raise ValueError(
                "Invalid value for `confidence_level` ({0}), must be one of {1}"
                .format(confidence_level, allowed_values)
            )

        self._confidence_level = confidence_level
